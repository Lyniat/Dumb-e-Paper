<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_s_p_i_handler" kind="class" language="C++" prot="public">
    <compoundname>SPIHandler</compoundname>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_s_p_i_handler_1a5cfd7a39245d1dd0b43f1c56cbbb5e35" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_SW_NORMAL_PROCESSING</definition>
        <argsstring></argsstring>
        <name>EP_SW_NORMAL_PROCESSING</name>
        <initializer>= 0x9000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="27" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1a3a530b72c02000a6b134b19c7e847320" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_SW_MEMORY_FAILURE</definition>
        <argsstring></argsstring>
        <name>EP_SW_MEMORY_FAILURE</name>
        <initializer>= 0x6581</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="28" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1a1a93d5407c877cebf7f30d204fc26d9c" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_SW_WRONG_LENGTH</definition>
        <argsstring></argsstring>
        <name>EP_SW_WRONG_LENGTH</name>
        <initializer>= 0x6700</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="29" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1a65e7e7032a330e9887ce5c2e517e1282" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_FRAMEBUFFER_SLOT_NOT_AVAILABLE</definition>
        <argsstring></argsstring>
        <name>EP_FRAMEBUFFER_SLOT_NOT_AVAILABLE</name>
        <initializer>= 0x6981</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="30" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1ae461639764a04831679898eb090bddfb" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_SW_WRONG_PARAMETERS_P1P2</definition>
        <argsstring></argsstring>
        <name>EP_SW_WRONG_PARAMETERS_P1P2</name>
        <initializer>= 0x6A00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="31" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1aeaa8ec034486b4283ffd0cbcc8609919" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_FRAMEBUFFER_SLOT_OVERRUN</definition>
        <argsstring></argsstring>
        <name>EP_FRAMEBUFFER_SLOT_OVERRUN</name>
        <initializer>= 0x6A84</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="32" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1ab7c20fc543944f8550183e982b26d963" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_SW_INVALID_LE</definition>
        <argsstring></argsstring>
        <name>EP_SW_INVALID_LE</name>
        <initializer>= 0x6C00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="33" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1ad443b39d195bcae372ca72ae1ed3b3ba" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_SW_INSTRUCTION_NOT_SUPPORTED</definition>
        <argsstring></argsstring>
        <name>EP_SW_INSTRUCTION_NOT_SUPPORTED</name>
        <initializer>= 0x6D00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="34" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1a4221cbb53bfda2a886e539d0867e0dc6" prot="public" static="yes" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t SPIHandler::EP_SW_GENERAL_ERROR</definition>
        <argsstring></argsstring>
        <name>EP_SW_GENERAL_ERROR</name>
        <initializer>= 0x6F00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="35" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1ac6354cb842ed70577a99683a706a7e00" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte SPIHandler::DISPLAY_UPDATE_MODE_DEFAULT</definition>
        <argsstring></argsstring>
        <name>DISPLAY_UPDATE_MODE_DEFAULT</name>
        <initializer>= 0x82</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="38" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1ab001f501f7abfdf1b0b338b9812a4284" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte SPIHandler::DISPLAY_UPDATE_MODE_FLASHLESS</definition>
        <argsstring></argsstring>
        <name>DISPLAY_UPDATE_MODE_FLASHLESS</name>
        <initializer>= 0x85</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="39" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1aad40e4016bd8e560c10258139af9c59a" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte SPIHandler::DISPLAY_UPDATE_MODE_FLASHLESS_INVERTED</definition>
        <argsstring></argsstring>
        <name>DISPLAY_UPDATE_MODE_FLASHLESS_INVERTED</name>
        <initializer>= 0x86</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="40" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_s_p_i_handler_1aadccd997bc4279f37ced82c8d640607e" prot="private" static="yes" mutable="no">
        <type>long</type>
        <definition>long SPIHandler::spiTime</definition>
        <argsstring></argsstring>
        <name>spiTime</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="50" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_p_i_handler_1a09c83d72d56bc71f7cb52fbdab389aab" prot="private" static="yes" mutable="no">
        <type>long</type>
        <definition>long SPIHandler::lastSpiTime</definition>
        <argsstring></argsstring>
        <name>lastSpiTime</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="51" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_s_p_i_handler_1a27128f03d27bb3338c32e30843ddb179" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPIHandler::printSpiTime</definition>
        <argsstring>()</argsstring>
        <name>printSpiTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="11" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.cpp" bodystart="6" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="class_s_p_i_handler_1aca9e77aeb4179c5a4bd3d82e36cf2b5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPIHandler::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
<para>initilaizes SPI </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="13" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.cpp" bodystart="16" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_s_p_i_handler_1afcc97347510627ef0e101f591fe7ee27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPIHandler::spiWrite</definition>
        <argsstring>(byte *data, char length, byte *result, char resultLength)</argsstring>
        <name>spiWrite</name>
        <param>
          <type>byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>char</type>
          <declname>length</declname>
          <defname>commandLength</defname>
        </param>
        <param>
          <type>byte *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>char</type>
          <declname>resultLength</declname>
        </param>
        <briefdescription>
<para>Sends bytes over SPI to display. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>command </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>commandLength</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to save result to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resultLength</parametername>
</parameternamelist>
<parameterdescription>
<para>expected length of result </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="15" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.cpp" bodystart="37" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_s_p_i_handler_1a3ea61ce242ca4deeaa42af6f9fbcb447" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SPIHandler::spiRead</definition>
        <argsstring>(byte *data, char commandLength, byte *result, char resultLength)</argsstring>
        <name>spiRead</name>
        <param>
          <type>byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>char</type>
          <declname>commandLength</declname>
        </param>
        <param>
          <type>byte *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>char</type>
          <declname>resultLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_s_p_i_handler_1ab1baea44831df24745a95ccd78d7aa3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPIHandler::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="19" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.cpp" bodystart="93" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_s_p_i_handler_1ac13b5367ed0d5f3db318f542e223b4be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SPIHandler::uploadImageData</definition>
        <argsstring>(byte slotNumber, byte packetSize, byte *data)</argsstring>
        <name>uploadImageData</name>
        <param>
          <type>byte</type>
          <declname>slotNumber</declname>
        </param>
        <param>
          <type>byte</type>
          <declname>packetSize</declname>
        </param>
        <param>
          <type>byte *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Uploads image data in EPD format to TCon image memory. </para>        </briefdescription>
        <detaileddescription>
<para>Data needs to be divided into packets and transferred with multiple UploadImageData commands. Returns EP_FRAMEBUFFER_SLOT_OVERRUN if memory size is exceeded.</para><para>If this command is used in partial update, do not include EPD header and encode data in EPD formaty type 0</para><para>Use ImageEraseFrameBuffer() once before uploading image data. Update the display after you have uploaded all of your data.</para><para>Command: INS: 0x20 P1: 0x01 P2: slot number Lc: data packet size (max 0xFA) Data: Lc data bytes (max 251 bytes)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slotNumber</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packetSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t 2-byte status code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="22" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.cpp" bodystart="144" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_s_p_i_handler_1a7655f1c7f891c95e9c0c4253defbe19b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SPIHandler::imageEraseFrameBuffer</definition>
        <argsstring>(byte slotNumber)</argsstring>
        <name>imageEraseFrameBuffer</name>
        <param>
          <type>byte</type>
          <declname>slotNumber</declname>
        </param>
        <briefdescription>
<para>Ereases selected slot. </para>        </briefdescription>
        <detaileddescription>
<para>Resets data pointer to beginning of selected memory slot index and erases selected slot. The erased slot is filled with 0xFF, which represents a black image.</para><para>Command: INS: 0x20 P1: 0x0E P2: memory slot index</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slotNumber</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t 2-byte status code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="23" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.cpp" bodystart="196" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_s_p_i_handler_1a8a7f23cd7178b27fa21e871a1e1fff14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SPIHandler::displayUpdate</definition>
        <argsstring>(byte updateMode=DISPLAY_UPDATE_MODE_DEFAULT)</argsstring>
        <name>displayUpdate</name>
        <param>
          <type>byte</type>
          <declname>updateMode</declname>
          <defval>DISPLAY_UPDATE_MODE_DEFAULT</defval>
        </param>
        <briefdescription>
<para>Updates display to show uploaded data. </para>        </briefdescription>
        <detaileddescription>
<para>Starts the display refresh sequence displaying the current content of the image memory. The transition sequence is chosen by INS parameter.</para><para>Command: INS: 0x24 or 0x82: default (black -&gt; white -&gt; black), offers best quality 0x85: flashless direct transition without blank screen; fast and energy efficient 0x86: flashless inverted transition (inverted new image -&gt; new image), compromise between quality and efficiency P1: 0x01 P2: memory slot index Lc: length Data: temperature (optional)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>updateMode</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t 2-byte status code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="24" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.cpp" bodystart="233" bodyend="250"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" line="8" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/SPIHandler.hpp" bodystart="7" bodyend="52"/>
    <listofallmembers>
      <member refid="class_s_p_i_handler_1ac6354cb842ed70577a99683a706a7e00" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>DISPLAY_UPDATE_MODE_DEFAULT</name></member>
      <member refid="class_s_p_i_handler_1ab001f501f7abfdf1b0b338b9812a4284" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>DISPLAY_UPDATE_MODE_FLASHLESS</name></member>
      <member refid="class_s_p_i_handler_1aad40e4016bd8e560c10258139af9c59a" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>DISPLAY_UPDATE_MODE_FLASHLESS_INVERTED</name></member>
      <member refid="class_s_p_i_handler_1a8a7f23cd7178b27fa21e871a1e1fff14" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>displayUpdate</name></member>
      <member refid="class_s_p_i_handler_1a65e7e7032a330e9887ce5c2e517e1282" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_FRAMEBUFFER_SLOT_NOT_AVAILABLE</name></member>
      <member refid="class_s_p_i_handler_1aeaa8ec034486b4283ffd0cbcc8609919" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_FRAMEBUFFER_SLOT_OVERRUN</name></member>
      <member refid="class_s_p_i_handler_1a4221cbb53bfda2a886e539d0867e0dc6" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_SW_GENERAL_ERROR</name></member>
      <member refid="class_s_p_i_handler_1ad443b39d195bcae372ca72ae1ed3b3ba" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_SW_INSTRUCTION_NOT_SUPPORTED</name></member>
      <member refid="class_s_p_i_handler_1ab7c20fc543944f8550183e982b26d963" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_SW_INVALID_LE</name></member>
      <member refid="class_s_p_i_handler_1a3a530b72c02000a6b134b19c7e847320" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_SW_MEMORY_FAILURE</name></member>
      <member refid="class_s_p_i_handler_1a5cfd7a39245d1dd0b43f1c56cbbb5e35" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_SW_NORMAL_PROCESSING</name></member>
      <member refid="class_s_p_i_handler_1a1a93d5407c877cebf7f30d204fc26d9c" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_SW_WRONG_LENGTH</name></member>
      <member refid="class_s_p_i_handler_1ae461639764a04831679898eb090bddfb" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>EP_SW_WRONG_PARAMETERS_P1P2</name></member>
      <member refid="class_s_p_i_handler_1a7655f1c7f891c95e9c0c4253defbe19b" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>imageEraseFrameBuffer</name></member>
      <member refid="class_s_p_i_handler_1aca9e77aeb4179c5a4bd3d82e36cf2b5d" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>init</name></member>
      <member refid="class_s_p_i_handler_1a09c83d72d56bc71f7cb52fbdab389aab" prot="private" virt="non-virtual"><scope>SPIHandler</scope><name>lastSpiTime</name></member>
      <member refid="class_s_p_i_handler_1a27128f03d27bb3338c32e30843ddb179" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>printSpiTime</name></member>
      <member refid="class_s_p_i_handler_1a3ea61ce242ca4deeaa42af6f9fbcb447" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>spiRead</name></member>
      <member refid="class_s_p_i_handler_1aadccd997bc4279f37ced82c8d640607e" prot="private" virt="non-virtual"><scope>SPIHandler</scope><name>spiTime</name></member>
      <member refid="class_s_p_i_handler_1afcc97347510627ef0e101f591fe7ee27" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>spiWrite</name></member>
      <member refid="class_s_p_i_handler_1ab1baea44831df24745a95ccd78d7aa3c" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>start</name></member>
      <member refid="class_s_p_i_handler_1ac13b5367ed0d5f3db318f542e223b4be" prot="public" virt="non-virtual"><scope>SPIHandler</scope><name>uploadImageData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
