<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes refid="main_8hpp" local="yes">main.hpp</includes>
    <incdepgraph>
      <node id="90">
        <label>Tools.hpp</label>
        <link refid="_tools_8hpp_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>SPI.h</label>
      </node>
      <node id="87">
        <label>LED.hpp</label>
        <link refid="_l_e_d_8hpp_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp</label>
        <link refid="main_8cpp"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>Website.hpp</label>
        <link refid="_website_8hpp_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>ESP8266mDNS.h</label>
      </node>
      <node id="88">
        <label>Storage.hpp</label>
        <link refid="_storage_8hpp_source"/>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>SPIHandler.hpp</label>
        <link refid="_s_p_i_handler_8hpp_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>WiFiHandler.hpp</label>
        <link refid="_wi_fi_handler_8hpp_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>ESP8266WiFi.h</label>
      </node>
      <node id="86">
        <label>MainStates.hpp</label>
        <link refid="_main_states_8hpp_source"/>
      </node>
      <node id="78">
        <label>Arduino.h</label>
      </node>
      <node id="82">
        <label>Beacon.hpp</label>
        <link refid="_beacon_8hpp_source"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>EEPROM.h</label>
      </node>
      <node id="77">
        <label>main.hpp</label>
        <link refid="main_8hpp_source"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8cpp_1ae41acc9179c65495b218ff7403fc23ea" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_LENGTH</definition>
        <argsstring></argsstring>
        <name>HEADER_LENGTH</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="3" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a130940607010fa28d7d9c154716ea55d" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_EPD_LENGTH</definition>
        <argsstring></argsstring>
        <name>HEADER_EPD_LENGTH</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="4" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a88570c9b509b8e3695089639546707d2" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_OFFSET_COMMAND</definition>
        <argsstring></argsstring>
        <name>HEADER_OFFSET_COMMAND</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="6" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a9df9191a6185eca0800322846d1da0b3" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_OFFSET_SLOT</definition>
        <argsstring></argsstring>
        <name>HEADER_OFFSET_SLOT</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="7" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a75b484a2c42b394ab9892d503eb8edb1" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_OFFSET_AREA_X</definition>
        <argsstring></argsstring>
        <name>HEADER_OFFSET_AREA_X</name>
        <initializer>= 0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="8" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a3c73a050f42169a6a0063b7ff700c914" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_OFFSET_AREA_Y</definition>
        <argsstring></argsstring>
        <name>HEADER_OFFSET_AREA_Y</name>
        <initializer>= 0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="9" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a2e796a4246086be792826dcbeb2c3aee" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_OFFSET_AREA_W</definition>
        <argsstring></argsstring>
        <name>HEADER_OFFSET_AREA_W</name>
        <initializer>= 0x06</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="10" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a6a877ddca284262543ecddea20bebb1f" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_OFFSET_AREA_H</definition>
        <argsstring></argsstring>
        <name>HEADER_OFFSET_AREA_H</name>
        <initializer>= 0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="11" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ac86fde31758e343b4ad71ec3d7dcb3cf" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_OFFSET_FILESIZE</definition>
        <argsstring></argsstring>
        <name>HEADER_OFFSET_FILESIZE</name>
        <initializer>= 0x0A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="12" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a3779289bb08d9fc07502381074fbf221" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_OFFSET_CHUNKSIZE</definition>
        <argsstring></argsstring>
        <name>HEADER_OFFSET_CHUNKSIZE</name>
        <initializer>= 0x0E</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="13" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ab42a7dbc4cd92d128279d1630e84ad1d" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_VALUE_CMD_RESET</definition>
        <argsstring></argsstring>
        <name>HEADER_VALUE_CMD_RESET</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="15" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1abeaf08318e337847c4a40324e60137d7" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_VALUE_CMD_SETROI</definition>
        <argsstring></argsstring>
        <name>HEADER_VALUE_CMD_SETROI</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="16" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ae2c8ea6893f5c4c446c6333c79b7c211" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_VALUE_CMD_UPLOAD</definition>
        <argsstring></argsstring>
        <name>HEADER_VALUE_CMD_UPLOAD</name>
        <initializer>= 0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="17" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a6ec654b4e2c3b9ddc39dfad397e64545" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_VALUE_CMD_REFRESH</definition>
        <argsstring></argsstring>
        <name>HEADER_VALUE_CMD_REFRESH</name>
        <initializer>= 0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="18" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a991a9ec944b9db981a30a011d5b4c105" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte HEADER_VALUE_CMD_GETBUSY</definition>
        <argsstring></argsstring>
        <name>HEADER_VALUE_CMD_GETBUSY</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="19" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a8a868abf872d79b7cad6a60bd0b3c735" prot="public" static="yes" mutable="no">
        <type>const byte</type>
        <definition>const byte IS_DISPLAY_CONNECTED</definition>
        <argsstring></argsstring>
        <name>IS_DISPLAY_CONNECTED</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="21" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a2275feee220f3b0e1aa780e1dbdffebb" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t maxFileSize</definition>
        <argsstring></argsstring>
        <name>maxFileSize</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="61" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1aca4266fa1b21f1d4c10d4d9aa0e46b86" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t curFileSize</definition>
        <argsstring></argsstring>
        <name>curFileSize</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="62" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a0a2dddaec10a8dbe5035cb84764f4aa4" prot="public" static="no" mutable="no">
        <type>MAIN_STATE</type>
        <definition>MAIN_STATE receiveState</definition>
        <argsstring></argsstring>
        <name>receiveState</name>
        <initializer>= MAIN_STATE ::STATE_NVS</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="63" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a312b599504201a9b4959a757d3adf0b1" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int sleepTime</definition>
        <argsstring></argsstring>
        <name>sleepTime</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="64" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ad3594d12c8592050b6066cfef9e53229" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int dataCounter</definition>
        <argsstring></argsstring>
        <name>dataCounter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="65" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a7f641cc1d9c4ac6f4038f3554a4d88d0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int chunkLength</definition>
        <argsstring></argsstring>
        <name>chunkLength</name>
        <initializer>= 250</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="66" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a22cb446e5271d5d2c4b2e23792fb1966" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long lastTime</definition>
        <argsstring></argsstring>
        <name>lastTime</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="67" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ac43476816dbe672ba8cdd03b3943df94" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long lastTimeTCM</definition>
        <argsstring></argsstring>
        <name>lastTimeTCM</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="68" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a1d2a53f15bf5b84bc30fa8787fddcc3f" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long lastTimeUpload</definition>
        <argsstring></argsstring>
        <name>lastTimeUpload</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="69" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a521225ece659da861c6915375604639a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int tcmWaitCounter</definition>
        <argsstring></argsstring>
        <name>tcmWaitCounter</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="70" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
<para>Never called, only for Clion IDE. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="75" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
<para>Called once on start. </para>        </briefdescription>
        <detaileddescription>
<para>Sets up the pins and initializes the SPI Handler </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="89" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="89" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Resets programm. </para>        </briefdescription>
        <detaileddescription>
<para>Ereases frame buffer and resets state machine </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="115" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loop</definition>
        <argsstring>()</argsstring>
        <name>loop</name>
        <briefdescription>
<para>Called in endless loop after setup. </para>        </briefdescription>
        <detaileddescription>
<para>Contains the state machine which handles, reading from flash, hosting an AP, connecting to network, receiving images and uploading them with SPI </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="126" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="126" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a681b6e7e145b04a7fd56edb1c5b428db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void waitForTCM</definition>
        <argsstring>()</argsstring>
        <name>waitForTCM</name>
        <briefdescription>
<para>Waits until TCM is ready. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="293" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="293" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1aa56d6e534ad412a038b0b016e42963b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uploadChunk</definition>
        <argsstring>(byte *data, int length)</argsstring>
        <name>uploadChunk</name>
        <param>
          <type>byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Uploads chunk over SPI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" line="313" column="1" bodyfile="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp" bodystart="313" bodyend="347"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;main.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_LENGTH<sp/>=<sp/>0x10;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_EPD_LENGTH<sp/>=<sp/>0x10;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_OFFSET_COMMAND<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_OFFSET_SLOT<sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_OFFSET_AREA_X<sp/>=<sp/>0x02;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_OFFSET_AREA_Y<sp/>=<sp/>0x04;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_OFFSET_AREA_W<sp/>=<sp/>0x06;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_OFFSET_AREA_H<sp/>=<sp/>0x08;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_OFFSET_FILESIZE<sp/>=<sp/>0x0A;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_OFFSET_CHUNKSIZE<sp/>=<sp/>0x0E;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_VALUE_CMD_RESET<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_VALUE_CMD_SETROI<sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_VALUE_CMD_UPLOAD<sp/>=<sp/>0x02;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_VALUE_CMD_REFRESH<sp/>=<sp/>0x03;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>HEADER_VALUE_CMD_GETBUSY<sp/>=<sp/>0x10;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>byte<sp/>IS_DISPLAY_CONNECTED<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="comment">//--------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//2<sp/>=<sp/>select</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//4<sp/>=<sp/>busy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//5<sp/>=<sp/>en</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>null<sp/>pointer:<sp/>0xA000003A9A10131140E0090C00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Header:<sp/>16<sp/>byte</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>1<sp/>byte<sp/>command:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>0x00<sp/>=<sp/>Reset</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>0x01<sp/>=<sp/>set<sp/>ROI</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>0x02<sp/>=<sp/>upload<sp/>image</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>0x03<sp/>=<sp/>refresh<sp/>display</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>0x10<sp/>=<sp/>get<sp/>busy<sp/>//<sp/>deprecated</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>1<sp/>byte<sp/>slot:<sp/>0x00<sp/>=<sp/>default</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>2<sp/>byte<sp/>area<sp/>x<sp/>(dividable<sp/>by<sp/>8!)</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>2<sp/>byte<sp/>area<sp/>y</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>2<sp/>byte<sp/>area<sp/>w</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>2<sp/>byte<sp/>area<sp/>h</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>4<sp/>byte<sp/>file<sp/>size<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>2<sp/>byte<sp/>chunk<sp/>size<sp/>(in<sp/>bytes)</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">uint32_t<sp/>maxFileSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">uint32_t<sp/>curFileSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">MAIN_STATE<sp/>receiveState<sp/>=<sp/>MAIN_STATE<sp/>::STATE_NVS;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sleepTime<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunkLength<sp/>=<sp/>250;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lastTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lastTimeTCM<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lastTimeUpload<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tcmWaitCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>setup();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loop();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setup()</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>the<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(PIN_EN,<sp/>OUTPUT);<sp/><sp/></highlight><highlight class="comment">//enable,<sp/>active<sp/>low</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(PIN_BUSY,<sp/>INPUT);<sp/></highlight><highlight class="comment">//busy,<sp/>high<sp/>when<sp/>device<sp/>is<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(PIN_CS,<sp/>OUTPUT);<sp/><sp/></highlight><highlight class="comment">//device<sp/>select,<sp/>active<sp/>low</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(PIN_RED,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(PIN_BLUE,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>pinMode(PIN_YELLOW,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_p_i_handler_1aca9e77aeb4179c5a4bd3d82e36cf2b5d" kindref="member">SPIHandler::init</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.begin(9600);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>SPIHandler::start();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_p_i_handler_1a7655f1c7f891c95e9c0c4253defbe19b" kindref="member">SPIHandler::imageEraseFrameBuffer</ref>(0);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>receiveState<sp/>=<sp/>MAIN_STATE<sp/>::STATE_NVS;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loop()</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>*buffer;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ssid;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*password;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(receiveState)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MAIN_STATE<sp/>::STATE_NVS:<sp/></highlight><highlight class="comment">//<sp/>read<sp/>flash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>read<sp/>&quot;ssid&quot;<sp/>and<sp/>&quot;password&quot;<sp/>from<sp/>flash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssid<sp/>=<sp/>Storage::readSSID();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>password<sp/>=<sp/>Storage::readPassword();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>connect<sp/>them.<sp/>if<sp/>valid,<sp/>true<sp/>will<sp/>be<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//success<sp/>=<sp/>true;//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/>WiFiHandler::init(ssid,<sp/>password);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiveState<sp/>=<sp/>MAIN_STATE<sp/>::STATE_WAITING;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiveState<sp/>=<sp/>MAIN_STATE<sp/>::STATE_BEACON;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MAIN_STATE<sp/>::STATE_BEACON:<sp/></highlight><highlight class="comment">//<sp/>host<sp/>access<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LED::setOnlyYellow();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>answer;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>answer<sp/>=<sp/><ref refid="class_beacon_1acb394acd98e7a26e53ac5ea061790f4d" kindref="member">Beacon::hostAP</ref>();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(answer)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssid<sp/>=<sp/><ref refid="class_beacon_1a764f7d109fed7526b28395b2bf9131b5" kindref="member">Beacon::getSSID</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>password<sp/>=<sp/><ref refid="class_beacon_1ab136bdd1bea81319954e1077df0cabbc" kindref="member">Beacon::getPassword</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(ssid)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>strlen(password)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(ssid);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(password);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/>WiFiHandler::init(ssid,<sp/>password);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiveState<sp/>=<sp/>MAIN_STATE<sp/>::STATE_WAITING;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Storage::write(ssid,<sp/>password);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MAIN_STATE<sp/>::STATE_WAITING:<sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>for<sp/>input<sp/>over<sp/>wifi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LED::setOnlyBlue();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>(byte<sp/>*)malloc(HEADER_LENGTH);<sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>for<sp/>custom<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitForTCM();<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>TCM<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WiFiHandler::handle(buffer,<sp/>HEADER_LENGTH)<sp/>==<sp/>WiFiStatus::WIFI_SUCCESS)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>file<sp/>size<sp/>from<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxFileSize<sp/>=<sp/>(buffer[HEADER_OFFSET_FILESIZE<sp/>+<sp/>0]<sp/>&lt;&lt;<sp/>24)<sp/>|</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buffer[HEADER_OFFSET_FILESIZE<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buffer[HEADER_OFFSET_FILESIZE<sp/>+<sp/>2]<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buffer[HEADER_OFFSET_FILESIZE<sp/>+<sp/>3]<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//maxFileSize<sp/>-=<sp/>16;<sp/>//substract<sp/>epd<sp/>header,<sp/>as<sp/>it<sp/>is<sp/>not<sp/>part<sp/>of<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>chunk<sp/>size<sp/>from<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunkLength<sp/>=<sp/>(buffer[HEADER_OFFSET_CHUNKSIZE<sp/>+<sp/>0]<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buffer[HEADER_OFFSET_CHUNKSIZE<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>0);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleepTime<sp/>=<sp/>5;<sp/></highlight><highlight class="comment">//<sp/>5<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TEMP!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if(IS_DISPLAY_CONNECTED<sp/>==<sp/>1)<sp/>ImageEraseFrameBuffer(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiveState<sp/>=<sp/>MAIN_STATE<sp/>::STATE_RECEIVE_DATA;<sp/></highlight><highlight class="comment">//<sp/>EPD<sp/>header<sp/>is<sp/>skipped<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastTime<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tcmWaitCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//receiveState<sp/>=<sp/>STATE_RECEIVE_EPD_HEADER;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MAIN_STATE<sp/>::STATE_RECEIVE_EPD_HEADER:<sp/></highlight><highlight class="comment">//<sp/>currently<sp/>not<sp/>used<sp/>(because<sp/>not<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>(byte<sp/>*)malloc(HEADER_EPD_LENGTH);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitForTCM();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WiFiHandler::handle(buffer,<sp/>HEADER_EPD_LENGTH)<sp/>==<sp/>WiFiStatus::WIFI_SUCCESS)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_DISPLAY_CONNECTED<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_p_i_handler_1a7655f1c7f891c95e9c0c4253defbe19b" kindref="member">SPIHandler::imageEraseFrameBuffer</ref>(0);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiveState<sp/>=<sp/>MAIN_STATE<sp/>::STATE_RECEIVE_DATA;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MAIN_STATE<sp/>::STATE_RECEIVE_DATA:<sp/></highlight><highlight class="comment">//<sp/>receive<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LED::setOnlyRed();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>chunk!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curFileSize<sp/>+<sp/>chunkLength<sp/>&gt;=<sp/>maxFileSize)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunkLength<sp/>=<sp/>maxFileSize<sp/>-<sp/>curFileSize;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>(byte<sp/>*)malloc(chunkLength);<sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>for<sp/>next<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitForTCM();<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>TCM<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WiFiHandler::handle(buffer,<sp/>chunkLength)<sp/>==<sp/>WiFiStatus::WIFI_SUCCESS)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataCounter++;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printBytes(buffer,<sp/>8);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>upload<sp/>image<sp/>data<sp/>chunk<sp/>to<sp/>TCM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_DISPLAY_CONNECTED<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uploadChunk(buffer,<sp/>chunkLength);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>curFileSize<sp/>is<sp/>currently<sp/>handled<sp/>in<sp/>uploadChunk()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//curFileSize<sp/>+=<sp/>chunkLength;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitForTCM();<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>TCM<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WiFiHandler::requestDataChunk();<sp/></highlight><highlight class="comment">//<sp/>send<sp/>tcp<sp/>signal<sp/>to<sp/>order<sp/>the<sp/>next<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>chunk!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curFileSize<sp/>&gt;=<sp/>maxFileSize)<sp/></highlight><highlight class="comment">//<sp/>||<sp/>curFileSize<sp/>&gt;=<sp/>0x30d4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tell<sp/>the<sp/>TCM<sp/>to<sp/>show<sp/>the<sp/>new<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_DISPLAY_CONNECTED<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_p_i_handler_1a8a7f23cd7178b27fa21e871a1e1fff14" kindref="member">SPIHandler::displayUpdate</ref>(SPIHandler::DISPLAY_UPDATE_MODE_DEFAULT);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;total<sp/>time:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(millis()<sp/>-<sp/>lastTime);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;tcm<sp/>wait<sp/>counter:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(tcmWaitCounter);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIHandler::printSpiTime();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(IS_DISPLAY_CONNECTED<sp/>==<sp/>1)<sp/>SPIHandler::imageEraseFrameBuffer(0);<sp/>//<sp/>TEMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleepTime<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiveState<sp/>=<sp/>MAIN_STATE<sp/>::STATE_WAITING;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxFileSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curFileSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunkLength<sp/>=<sp/>250;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>yield();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>delayMicroseconds(sleepTime);</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>waitForTCM()</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_DISPLAY_CONNECTED<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(digitalRead(PIN_BUSY)<sp/>==<sp/>LOW)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yield();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tcmWaitCounter++;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delayMicroseconds(5);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uploadChunk(byte<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufferLength<sp/>=<sp/>250;<sp/></highlight><highlight class="comment">//<sp/>length<sp/>of<sp/>one<sp/>package<sp/>inside<sp/>the<sp/>chunk<sp/>(251<sp/>bytes<sp/>is<sp/>maximum,<sp/>we<sp/>used<sp/>250<sp/>because<sp/>it&apos;s<sp/>more<sp/>convenient)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uint32_t<sp/>result<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>chunkLength;<sp/>i<sp/>+=<sp/>bufferLength)<sp/></highlight><highlight class="comment">//<sp/>attention!<sp/>i<sp/>is<sp/>incremented<sp/>by<sp/>250<sp/>each<sp/>loop!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>length<sp/>for<sp/>last<sp/>chunk<sp/>if<sp/>it&apos;s<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>bufferLength<sp/>&gt;<sp/>chunkLength)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferLength<sp/>=<sp/>chunkLength<sp/>%<sp/>bufferLength;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>and<sp/>also<sp/>adjust<sp/>length<sp/>if<sp/>it&apos;s<sp/>the<sp/>last<sp/>package<sp/>of<sp/>the<sp/>last<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curFileSize<sp/>+<sp/>bufferLength<sp/>&gt;<sp/>maxFileSize)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferLength<sp/>=<sp/>maxFileSize<sp/>-<sp/>curFileSize;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lastTimeTCM<sp/>=<sp/>millis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitForTCM();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(&quot;TCM<sp/>time:<sp/>&quot;);<sp/>Serial.println(millis()<sp/>-<sp/>lastTimeTCM);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lastTime<sp/>=<sp/>millis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>upload<sp/>image<sp/>data<sp/>to<sp/>TCM<sp/>memory<sp/>(ca<sp/>45<sp/>ms<sp/>per<sp/>upload<sp/>(that&apos;s<sp/>a<sp/>lot!))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_DISPLAY_CONNECTED<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_p_i_handler_1ac13b5367ed0d5f3db318f542e223b4be" kindref="member">SPIHandler::uploadImageData</ref>(0,<sp/>bufferLength,<sp/>data<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.print(&quot;time<sp/>to<sp/>process:<sp/>&quot;);<sp/>Serial.println(millis()<sp/>-<sp/>lastTime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Serial.println(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//result<sp/>=<sp/>i<sp/>+<sp/>bufferLength;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curFileSize<sp/>+=<sp/>bufferLength;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curFileSize<sp/>&gt;=<sp/>maxFileSize)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/laurin/Documents/Uni/Dumb-e-Paper/e-Paper/src/main.cpp"/>
  </compounddef>
</doxygen>
